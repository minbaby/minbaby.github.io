<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on 霸气千秋</title>
    <link>https://minbaby.github.io/tags/php/</link>
    <description>Recent content in php on 霸气千秋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 24 Nov 2018 19:42:15 +0800</lastBuildDate>
    
	<atom:link href="https://minbaby.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>phpbrew set mirror（加速）</title>
      <link>https://minbaby.github.io/post/2018-11/phpbrew-set-mirror/</link>
      <pubDate>Sat, 24 Nov 2018 19:42:15 +0800</pubDate>
      
      <guid>https://minbaby.github.io/post/2018-11/phpbrew-set-mirror/</guid>
      <description>-- phpbrew 是一个构建、安装多版本 PHP 到用户根目录的工具。 phpbrew 能做什么？ 支持使用 PDO，mysql，sqlite，debug 等不同「Variants」编</description>
    </item>
    
    <item>
      <title>如何调用 php 自定义函数或者其他扩展的函数</title>
      <link>https://minbaby.github.io/post/2018-11/php-extension-call-function/</link>
      <pubDate>Mon, 19 Nov 2018 23:19:16 +0800</pubDate>
      
      <guid>https://minbaby.github.io/post/2018-11/php-extension-call-function/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近在学习 php extension 开发，在某些情况下需要调用到用户自定义方法或者其他扩展的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;call_user_function&lt;/code&gt; 是 php 底层提供的一个方法，可以&lt;strong&gt;动态&lt;/strong&gt;的调用&lt;strong&gt;函数&lt;/strong&gt;。这里的函数就是说的 php 函数，也就是说要导出成 php 的函数才能被调用。如果是 c 语言函数那么就可以直接在扩展中调用方法了，不需要使用这个方法。&lt;/p&gt;

&lt;h2 id=&#34;解释&#34;&gt;解释&lt;/h2&gt;

&lt;p&gt;我们看一下这个方法的函数原型：　&lt;/p&gt;

&lt;p&gt;&lt;code&gt;call_user_function(function_table, object, function_name, retval_ptr, param_count, params)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function_table&lt;/code&gt; 该函数已经被废弃，之所以没有被移除，应该是为了兼容性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zval *object&lt;/code&gt;, 如果调用的是对象的方法，则这个 object　则是类的实例。反之使用 NULL。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zval *function_name&lt;/code&gt;, 调用的函数的名字。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zval *retval_ptr&lt;/code&gt;,　函数执行完成之后的返回值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint32_t param_count&lt;/code&gt;, 执行的函数有几个参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zval params[]&lt;/code&gt;, 执行的函数的参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;代码示例&#34;&gt;代码示例&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;PHP_METHOD(Stringy, length)
{
    zval func = {}, args[1] = {}, rv = {};
    zval *value;
    ZVAL_STRING(&amp;amp;func, &amp;quot;mb_strlen&amp;quot;);

    value = zend_read_property(stringy_ce, getThis(), &amp;quot;str&amp;quot;, strlen(&amp;quot;str&amp;quot;), 0, &amp;amp;rv);

    args[0] = *value;

    call_user_function(NULL, NULL, &amp;amp;func, return_value, 1, args);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minbaby/php-ext-startup&#34;&gt;php-ext-start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>laravel(lumen) schedule 使用腾讯云 redis 作为缓存出现的问题</title>
      <link>https://minbaby.github.io/post/2018-03/laravel-lumen-schedule-shi-yong-teng-xun-yun-redis/</link>
      <pubDate>Fri, 16 Mar 2018 14:34:27 +0800</pubDate>
      
      <guid>https://minbaby.github.io/post/2018-03/laravel-lumen-schedule-shi-yong-teng-xun-yun-redis/</guid>
      <description>api 项目上线之后 sentry 上收集到了一个奇怪的问题。 Predis\Response\ServerExceptionvendor/predis/predis/src/Client.php in onErrorResponse errorERR unknown command &#39; EVAL &#39;php 看到这个 EVAL 这个命令，感觉是因为使用 lua 的原因，但是项目中我们又没有在 redis 中使用 lua 脚本</description>
    </item>
    
    <item>
      <title>Laravel 框架记录执行时间并进行相关处理</title>
      <link>https://minbaby.github.io/post/2017-07/laravel-%E6%A1%86%E6%9E%B6%E8%AE%B0%E5%BD%95%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 31 Jul 2017 14:55:01 +0800</pubDate>
      
      <guid>https://minbaby.github.io/post/2017-07/laravel-%E6%A1%86%E6%9E%B6%E8%AE%B0%E5%BD%95%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%85%B3%E5%A4%84%E7%90%86/</guid>
      <description>只需要把下边的方法放在 bootstrap/app.php 文件即可。 /* |-------------------------------------------------------------------------- | 记录执行时间， 如果大于 3s 则把信息更新到 sentry |-------------------------------------------------------------------------- */ app()-&amp;gt;terminating(function () { $handleCliInfo = function () { // 哪些命令不进行记录 $except = [ &#39;queue:work&#39; ]; $info = with(new \Symfony\Component\Console\Input\ArgvInput())-&amp;gt;getFirstArgument(); return</description>
    </item>
    
    <item>
      <title>php 内置 web server</title>
      <link>https://minbaby.github.io/post/2015-06/php-build-in-web-server/</link>
      <pubDate>Sun, 07 Jun 2015 08:57:55 +0800</pubDate>
      
      <guid>https://minbaby.github.io/post/2015-06/php-build-in-web-server/</guid>
      <description>PHP 5.4.0起， CLI SAPI 提供了一个内置的Web服务器。 这个内置的Web服务器主要用于本地开发使用，不可用于线上产品环境。 URI请求会被发送到PH</description>
    </item>
    
  </channel>
</rss>